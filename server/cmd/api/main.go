// Code generated by hertz generator.

package main

import (
	"fmt"

	"github.com/CyanAsterisk/TikGok/server/cmd/api/config"
	"github.com/CyanAsterisk/TikGok/server/cmd/api/initialize"
	"github.com/CyanAsterisk/TikGok/server/cmd/api/initialize/rpc"
	initialize2 "github.com/CyanAsterisk/TikGok/server/cmd/api/pkg/uploadService/initialize"
	"github.com/cloudwego/hertz/pkg/app/server"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	hertztracing "github.com/hertz-contrib/obs-opentelemetry/tracing"
	"github.com/hertz-contrib/pprof"
)

func main() {
	// initialize

	// init logger for hertz
	initialize.InitLogger()

	// read local nacos config
	// read remote config from nacos and save to config.GlobalServerConfig
	// TODO: create registry and get registry info
	registry, registryInfo := initialize.InitNacos()

	// TODO
	tracer, cfg := hertztracing.NewServerTracer()
	// create rpc client
	rpc.Init() // TODO

	{ // upload service
		config.GlobalUploadService = initialize2.Init()

		// get upload task and run upload
		go func() {
			err := config.GlobalUploadService.RunVideoUpload()
			if err != nil {
				hlog.Fatal("upload service err", err)
			}
		}()
	}

	// create a new api server and run
	h := server.New(
		tracer,
		server.WithHostPorts(fmt.Sprintf(":%d", config.GlobalServerConfig.Port)),
		server.WithRegistry(registry, registryInfo),
		server.WithHandleMethodNotAllowed(true),
	)
	// use pprof & tracer mw
	pprof.Register(h)
	h.Use(hertztracing.ServerMiddleware(cfg))
	register(h) //  register api routers
	h.Spin()
}
